safehaven_full/
  backend/
    safe_tools/
  mobile/
  data/
fastapi==0.111.0
uvicorn[standard]==0.30.1
pydantic==2.7.4
python-dotenv==1.0.1
LLM_PROVIDER=
OPENAI_API_KEY=
CORS_ORIGIN=*
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, List
import os

from safe_tools.utils import detect_crisis, save_journal, list_journal, save_mood, list_mood, llm_complete
from safe_tools.cbt import cognitive_reframe
from safe_tools.crisis import crisis_response
from safe_tools.journal import make_entry as journal_entry
from safe_tools.mood import make_entry as mood_entry

app = FastAPI(title="SafeHaven API", version="1.0.0")

origins = os.getenv("CORS_ORIGIN", "*").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class ChatIn(BaseModel):
    message: str

class ChatOut(BaseModel):
    text: str
    crisis: bool = False
    tool_used: Optional[str] = None

@app.post("/api/chat", response_model=ChatOut)
def chat(payload: ChatIn):
    msg = (payload.message or "").strip()
    if not msg:
        raise HTTPException(status_code=400, detail="Empty message.")
    if detect_crisis(msg):
        return ChatOut(text=crisis_response(), crisis=True, tool_used="crisis")
    if any(k in msg.lower() for k in ["reframe", "cbt", "thought trap", "negative thought"]):
        return ChatOut(text=cognitive_reframe(msg), tool_used="cbt")
    llm = llm_complete(f"User: {msg}\nAssistant:")
    if llm:
        return ChatOut(text=llm, tool_used="llm")
    fallback = ("I'm here. Want a quick grounding exercise?\n"
                "• In 4, hold 4, out 6 (x6)\n"
                "• Name 3 things you see, 2 you feel, 1 you hear.\n"
                "Say 'reframe: <thought>' for CBT help.")
    return ChatOut(text=fallback, tool_used="support")

class JournalIn(BaseModel):
    text: str
    tags: Optional[List[str]] = None

@app.post("/api/journal")
def add_journal(e: JournalIn):
    created = journal_entry(e.text, e.tags or [])
    return save_journal(created)

@app.get("/api/journal")
def get_journal():
    return list_journal()

class MoodIn(BaseModel):
    mood: str
    note: Optional[str] = ""

@app.post("/api/mood")
def add_mood(e: MoodIn):
    created = mood_entry(e.mood, e.note or "")
    return save_mood(created)

@app.get("/api/mood")
def get_mood():
    return list_mood()

@app.get("/api/resources")
def resources():
    return {
        "immediate_help": [
            {"name": "988 Suicide & Crisis Lifeline (US)", "url": "https://988lifeline.org/"},
            {"name": "Emergency", "url": "tel:911"}
        ],
        "self_help": [
            {"name": "Box Breathing (4-4-6)", "url": "https://en.wikipedia.org/wiki/Box_breathing"},
            {"name": "CBT Basics (NHS)", "url": "https://www.nhs.uk/mental-health/talking-therapies-medicine-treatments/therapies-and-counselling/cognitive-behavioural-therapy-cbt/what-is-cbt/"}
        ]
    }
